package com.wlz.java.chapterTen_innerClass;

import net.mindview.util.Null;

public class Test01 {

	public static void main(String[] args) {
		
		// TODO Auto-generated method stub
		/*
		 * 内部类：将一个类定义在一个类的内部(名字隐藏和组织代码隐藏)
		 * 内部类能与外部类进行通信
		 */
		/*
		 * 1、创建内部类
		 * 在类的内部使用内部类跟外部类没有什么区别
		 * OUtclassName.InnerClassName
		 * 示例（Parcel1和Parcel2）
		 */
		
		/*
		 * 2、连接到外部类
		 * 访问外部类的成员变量
		 * 示例（Sequence类）
		 */
		
		/*
		 * 3、使用.this和.new
		 * .this:生成外部类对象的引用，在内部类中调用：OutClass.this
		 * .new :如果内部类不是静态的，要产生内部类对象：外部类对象.new 内部类（）
		 * 示例：（DoThis类）
		 * 静态内部类就不需要先创建外部对象再创建内部对象了
		 * 示例（DoThis类）
		 */
		
		/*
		 * 4、内部类与向上转型
		 * (TestParcel类下・)
		 */
		/*
		 * 5、在方法和作用域内的内部类
		 * 在方法内创建类（局部内部类）
		 * 示例（Parcel5.java）
		 */
		
		/*
		 * 6、匿名内部类
		 * 示例（Parcel7.java）
		 * 给匿名内部类传递参数（基本类型没有限制，引用类型必须是final限制的）
		 * 6.1再放工厂方法（Factories类）
		 */
		
		/*
		 * 7、嵌套类
		 * 当内部类被static修饰时，这被称为嵌套类
		 * 嵌套类不属于对象，不能访问非静态的外围类对象
		 * 普通内部类隐式保存了一个引用，指向它的外围对象，普通内部类不能有static数据和字段，也不能包含嵌套类
		 * 示例（Parcel11.java）
		 * 
		 * 7.1接口内部的类
		 * 正常情况下，接口内部不能有任何代码，带嵌套类可以作为接口的一部分，因为接口内的所有字段都是static和final的，因为嵌套类是static的，并不违反规则
		 *   接口中的嵌套类也可以实现该接口
		 *   内部类可以有多层，不管有多少层，都可以访问它外围的成员或方法.new能产生正确的作用域
		 */
		
		/*
		 * 8、为什么需要内部类
		 * 
		 * 示例（MulitInterface类）
		 * 内部类可以联合外部类实现多重继承（如果实现抽象类或类的时候，外部类只能单继承）
		 * 示例（Mutilmplentation)
		 * 内部类可以有多个实例，每个实例有自己的状态信息，信息与外部对象独立
		 * 创建内部类对象的时刻并不依赖外围类对象的创建
		 * 8.1闭包与回调
		 * 内部类是面向对象的闭包，因为它不仅包含外围类对象（创建内部类的作用域）的信息，还自动拥有一个指向外围类对象的引用，在此作用域里，内部类可以操作所有的成员，包括private的
		 * 示例（Callbacks类）
		 *8.2：内部类和应用程序框架啊
		 *应用程序框架：用以解决某类特定问题的一个类或一组类
		 *控制框架：用以解决响应事件的需求（主要用来相应事件的系统被称作事件驱动系统） 
		 *应用程序设计中常见的问题是图形用户接口GUI,它几乎全是事件驱动的系统
		 *Java Swing 就是一个控制框架，用以解决GUI的问题，使用了大量的内部类
		 *示例（Event和Controls和Greenhouse）
		 */
		/*
		 * 9、内部类的继承
		 * 示例（inheritInner类）
		 */
		
		/*
		 * 10、内部类可以被覆盖吗
		 * 示例（BigEgg.java）
		 * 当继承外部类，内部类并没有什么变化，还是各自独立的，尽管在扩展类重写内部类
		 * 如果要继承内部类怎么办
		 * 示例（BigEgg2.java）
		 */
		
		/*
		 * 11、局部内部类
		 * 示例（LocalInnerClass.java)局部内部类和匿名内部类的比较
		 */
		
		
	}

}
