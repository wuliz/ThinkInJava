package com.wlz.java.chapterSeven_ReusableClass;

public class Test01 {
	//java的两种代码复用机制：组合和继承、代理
	//1组合：将其他类的对象作为新类的数据成员
	//关于对象的初始化
	//1、定义的方式初始化
	//2、构造函数中初始化
	//3、惰性初始化：需要的时候再初始化
	//4、实例初始化
	
	String s;//未初始化的成员变量
	void setS(){
		s="aaa";//惰性初始化
	}
	/*
	 * 2继承：继承的新类和基类具有相似的特性才适合用继承
	 * 所有类的最基层基类是object类
	 * 示例：见Detegent类
	 */
	/*
	 * 2.1初始化基类：当从导出来创建对象时，该对象也包含了一个基类对象（基类对象被包装在导出类对象内部）
	 * 下面演示基类和导出类对象的初始化顺序
	 * 顺序：向外扩展：先创建基类再创建扩展类
	 * 即使没有显式创建构造器，编译器也会合成一个默认构造器（在基类构造器没有参数的情况下）
	 * 示例：Cartoon类
	 *带参数的构造器怎么办：super
	 *示例：Cartoon
	 */
	
	/*
	 * 3代理：继承和组合的中庸
	 * 组合：一个新类中包含其他类的对象，但该对象的访问权限是public
	 * 继承：要求基类和扩展是存在相似关系的，比如说人拥有手，但人不能去继承手
	 * 代理：在组合的基础上，将对象变为私有，通过新类的方法间接访问对象，这相当于要重写对象的方法。
	 * 示例：DetegentTwo类
	 */
	
	/*
	 * 4结合使用组合和继承：用以创建更为复杂的类
	 * 示例：PlaceSetting.java类
	 * 4.1名称屏蔽
	 * 导出类的方法名和基类相同，只要不是参数名也相同,就不会覆盖基类的方法
	 * 示例：Hide类
	 * 
	 */
	/*
	 * 5在组合和继承之间做选择
	 * 组合和继承都允许在新类中放置子对象，组合是显式这样做，继承是隐式这样做，
	 * 组合：只是想使用现有类的功能并非它的接口
	 * 继承：主要是开放接口
	 * 示例：车的结构（Car类）
	 * is-a表继承，has-a表组合
	 */
	/*
	 * 6protected关键字
	 * 包访问权限和继承特性
	 */
	/*
	 * 7、向上转型（将一个专用类转为通用类）
	 * 可以向基类发送的消息也可以向导出类发出消息
	 * 将导出类的对象传给基类引用的方式叫做向上转型
	 * 向上转型是安全的（因为导出类肯定具有基类的所有属性和方法）
	 * 示例：见Wind.java
	 */
	/*
	 * 再论组合和继承
	 * 另一个考量的指标：新类是否会用到向上转型
	 * 练习：Frog
	 */
	/*
	 * 8final关键词：（最终的，不能改变的）
	 * final的三种使用：数据、方法和类
	 * 8.1final数据
	 * static+final(编译期常量，将用大写表示)
	 * final(常量)：基本类型是常量，引用类型指不能指向其他对象
	 * 示例：FinalData.java
	 * 空白final,意为没有给它初始化，必须在构造函数内初始化
	 * 8.2final方法
	 * 修饰方法表示继承时不能被覆盖（重写）
	 * 如果你试图覆盖的话，编译器不会报错
	 * 8.3final类
	 * 表示类不能被继承
	 */
	
	/*
	 * 9初始化及类的加载
	 * 编译代码（.class）加载时，当访问static域或方法时，类的初次代码就会被加载（类的初始加载时：会初始化static变量和static静态块）
	 */
	/*
	 * 10继承与初始化
	 * 案例：Battle.java
	 */
}
